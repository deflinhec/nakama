// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: apigrpc/apigrpc.proto

package apigrpc

import (
	context "context"
	api "github.com/bcasino/nakama-web/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebClient interface {
	// A healthcheck which load balancers can use to check the service.
	Healthcheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type webClient struct {
	cc grpc.ClientConnInterface
}

func NewWebClient(cc grpc.ClientConnInterface) WebClient {
	return &webClient{cc}
}

func (c *webClient) Healthcheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nakama.web.Web/Healthcheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServer is the server API for Web service.
// All implementations must embed UnimplementedWebServer
// for forward compatibility
type WebServer interface {
	// A healthcheck which load balancers can use to check the service.
	Healthcheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedWebServer()
}

// UnimplementedWebServer must be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (UnimplementedWebServer) Healthcheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthcheck not implemented")
}
func (UnimplementedWebServer) mustEmbedUnimplementedWebServer() {}

// UnsafeWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServer will
// result in compilation errors.
type UnsafeWebServer interface {
	mustEmbedUnimplementedWebServer()
}

func RegisterWebServer(s grpc.ServiceRegistrar, srv WebServer) {
	s.RegisterService(&Web_ServiceDesc, srv)
}

func _Web_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.web.Web/Healthcheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).Healthcheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Web_ServiceDesc is the grpc.ServiceDesc for Web service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Web_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.web.Web",
	HandlerType: (*WebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthcheck",
			Handler:    _Web_Healthcheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apigrpc/apigrpc.proto",
}

// WebForwardClient is the client API for WebForward service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebForwardClient interface {
	// Get available features from web ui.
	GetFeatures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*api.Features, error)
	// Send email verification.
	SendEmailVerificationCode(ctx context.Context, in *api.Email, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Send email verification.
	SendEmailVerificationLink(ctx context.Context, in *api.Email, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Send password reset email.
	SendPasswordResetEmail(ctx context.Context, in *api.Email, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Verfiy password from web ui.
	VerifyPasswordRenewal(ctx context.Context, in *api.VerifyPasswordRenewalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Verfiy email address from web ui.
	VerifyEmailAddress(ctx context.Context, in *api.VerifyEmailAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type webForwardClient struct {
	cc grpc.ClientConnInterface
}

func NewWebForwardClient(cc grpc.ClientConnInterface) WebForwardClient {
	return &webForwardClient{cc}
}

func (c *webForwardClient) GetFeatures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*api.Features, error) {
	out := new(api.Features)
	err := c.cc.Invoke(ctx, "/nakama.web.WebForward/GetFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webForwardClient) SendEmailVerificationCode(ctx context.Context, in *api.Email, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nakama.web.WebForward/SendEmailVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webForwardClient) SendEmailVerificationLink(ctx context.Context, in *api.Email, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nakama.web.WebForward/SendEmailVerificationLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webForwardClient) SendPasswordResetEmail(ctx context.Context, in *api.Email, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nakama.web.WebForward/SendPasswordResetEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webForwardClient) VerifyPasswordRenewal(ctx context.Context, in *api.VerifyPasswordRenewalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nakama.web.WebForward/VerifyPasswordRenewal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webForwardClient) VerifyEmailAddress(ctx context.Context, in *api.VerifyEmailAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nakama.web.WebForward/VerifyEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebForwardServer is the server API for WebForward service.
// All implementations must embed UnimplementedWebForwardServer
// for forward compatibility
type WebForwardServer interface {
	// Get available features from web ui.
	GetFeatures(context.Context, *emptypb.Empty) (*api.Features, error)
	// Send email verification.
	SendEmailVerificationCode(context.Context, *api.Email) (*emptypb.Empty, error)
	// Send email verification.
	SendEmailVerificationLink(context.Context, *api.Email) (*emptypb.Empty, error)
	// Send password reset email.
	SendPasswordResetEmail(context.Context, *api.Email) (*emptypb.Empty, error)
	// Verfiy password from web ui.
	VerifyPasswordRenewal(context.Context, *api.VerifyPasswordRenewalRequest) (*emptypb.Empty, error)
	// Verfiy email address from web ui.
	VerifyEmailAddress(context.Context, *api.VerifyEmailAddressRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWebForwardServer()
}

// UnimplementedWebForwardServer must be embedded to have forward compatible implementations.
type UnimplementedWebForwardServer struct {
}

func (UnimplementedWebForwardServer) GetFeatures(context.Context, *emptypb.Empty) (*api.Features, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}
func (UnimplementedWebForwardServer) SendEmailVerificationCode(context.Context, *api.Email) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailVerificationCode not implemented")
}
func (UnimplementedWebForwardServer) SendEmailVerificationLink(context.Context, *api.Email) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailVerificationLink not implemented")
}
func (UnimplementedWebForwardServer) SendPasswordResetEmail(context.Context, *api.Email) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordResetEmail not implemented")
}
func (UnimplementedWebForwardServer) VerifyPasswordRenewal(context.Context, *api.VerifyPasswordRenewalRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPasswordRenewal not implemented")
}
func (UnimplementedWebForwardServer) VerifyEmailAddress(context.Context, *api.VerifyEmailAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmailAddress not implemented")
}
func (UnimplementedWebForwardServer) mustEmbedUnimplementedWebForwardServer() {}

// UnsafeWebForwardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebForwardServer will
// result in compilation errors.
type UnsafeWebForwardServer interface {
	mustEmbedUnimplementedWebForwardServer()
}

func RegisterWebForwardServer(s grpc.ServiceRegistrar, srv WebForwardServer) {
	s.RegisterService(&WebForward_ServiceDesc, srv)
}

func _WebForward_GetFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebForwardServer).GetFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.web.WebForward/GetFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebForwardServer).GetFeatures(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebForward_SendEmailVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebForwardServer).SendEmailVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.web.WebForward/SendEmailVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebForwardServer).SendEmailVerificationCode(ctx, req.(*api.Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebForward_SendEmailVerificationLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebForwardServer).SendEmailVerificationLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.web.WebForward/SendEmailVerificationLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebForwardServer).SendEmailVerificationLink(ctx, req.(*api.Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebForward_SendPasswordResetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebForwardServer).SendPasswordResetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.web.WebForward/SendPasswordResetEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebForwardServer).SendPasswordResetEmail(ctx, req.(*api.Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebForward_VerifyPasswordRenewal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.VerifyPasswordRenewalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebForwardServer).VerifyPasswordRenewal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.web.WebForward/VerifyPasswordRenewal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebForwardServer).VerifyPasswordRenewal(ctx, req.(*api.VerifyPasswordRenewalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebForward_VerifyEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.VerifyEmailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebForwardServer).VerifyEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.web.WebForward/VerifyEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebForwardServer).VerifyEmailAddress(ctx, req.(*api.VerifyEmailAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebForward_ServiceDesc is the grpc.ServiceDesc for WebForward service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebForward_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.web.WebForward",
	HandlerType: (*WebForwardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeatures",
			Handler:    _WebForward_GetFeatures_Handler,
		},
		{
			MethodName: "SendEmailVerificationCode",
			Handler:    _WebForward_SendEmailVerificationCode_Handler,
		},
		{
			MethodName: "SendEmailVerificationLink",
			Handler:    _WebForward_SendEmailVerificationLink_Handler,
		},
		{
			MethodName: "SendPasswordResetEmail",
			Handler:    _WebForward_SendPasswordResetEmail_Handler,
		},
		{
			MethodName: "VerifyPasswordRenewal",
			Handler:    _WebForward_VerifyPasswordRenewal_Handler,
		},
		{
			MethodName: "VerifyEmailAddress",
			Handler:    _WebForward_VerifyEmailAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apigrpc/apigrpc.proto",
}
