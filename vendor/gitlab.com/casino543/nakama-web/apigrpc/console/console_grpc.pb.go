// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: apigrpc/console/console.proto

package console

import (
	context "context"
	api "gitlab.com/casino543/nakama-web/apigrpc/console/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelClient interface {
	// Kick account.
	KickAccount(ctx context.Context, in *api.AccountId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get mail config.
	GetMailConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*api.Config, error)
}

type tunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelClient(cc grpc.ClientConnInterface) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) KickAccount(ctx context.Context, in *api.AccountId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.ext.Tunnel/KickAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetMailConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*api.Config, error) {
	out := new(api.Config)
	err := c.cc.Invoke(ctx, "/nakama.console.ext.Tunnel/GetMailConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelServer is the server API for Tunnel service.
// All implementations must embed UnimplementedTunnelServer
// for forward compatibility
type TunnelServer interface {
	// Kick account.
	KickAccount(context.Context, *api.AccountId) (*emptypb.Empty, error)
	// Get mail config.
	GetMailConfig(context.Context, *emptypb.Empty) (*api.Config, error)
	mustEmbedUnimplementedTunnelServer()
}

// UnimplementedTunnelServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelServer struct {
}

func (UnimplementedTunnelServer) KickAccount(context.Context, *api.AccountId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickAccount not implemented")
}
func (UnimplementedTunnelServer) GetMailConfig(context.Context, *emptypb.Empty) (*api.Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMailConfig not implemented")
}
func (UnimplementedTunnelServer) mustEmbedUnimplementedTunnelServer() {}

// UnsafeTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServer will
// result in compilation errors.
type UnsafeTunnelServer interface {
	mustEmbedUnimplementedTunnelServer()
}

func RegisterTunnelServer(s grpc.ServiceRegistrar, srv TunnelServer) {
	s.RegisterService(&Tunnel_ServiceDesc, srv)
}

func _Tunnel_KickAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).KickAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.ext.Tunnel/KickAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).KickAccount(ctx, req.(*api.AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetMailConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetMailConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.ext.Tunnel/GetMailConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetMailConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Tunnel_ServiceDesc is the grpc.ServiceDesc for Tunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.console.ext.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KickAccount",
			Handler:    _Tunnel_KickAccount_Handler,
		},
		{
			MethodName: "GetMailConfig",
			Handler:    _Tunnel_GetMailConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apigrpc/console/console.proto",
}
