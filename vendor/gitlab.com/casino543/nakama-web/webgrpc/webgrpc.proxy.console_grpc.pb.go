// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: webgrpc.proxy.console.proto

package webgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsoleProxyClient is the client API for ConsoleProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsoleProxyClient interface {
	// Get available features from web ui.
	SessionLogout(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type consoleProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewConsoleProxyClient(cc grpc.ClientConnInterface) ConsoleProxyClient {
	return &consoleProxyClient{cc}
}

func (c *consoleProxyClient) SessionLogout(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nakama.web.ConsoleProxy/SessionLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsoleProxyServer is the server API for ConsoleProxy service.
// All implementations must embed UnimplementedConsoleProxyServer
// for forward compatibility
type ConsoleProxyServer interface {
	// Get available features from web ui.
	SessionLogout(context.Context, *AccountId) (*emptypb.Empty, error)
	mustEmbedUnimplementedConsoleProxyServer()
}

// UnimplementedConsoleProxyServer must be embedded to have forward compatible implementations.
type UnimplementedConsoleProxyServer struct {
}

func (UnimplementedConsoleProxyServer) SessionLogout(context.Context, *AccountId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionLogout not implemented")
}
func (UnimplementedConsoleProxyServer) mustEmbedUnimplementedConsoleProxyServer() {}

// UnsafeConsoleProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsoleProxyServer will
// result in compilation errors.
type UnsafeConsoleProxyServer interface {
	mustEmbedUnimplementedConsoleProxyServer()
}

func RegisterConsoleProxyServer(s grpc.ServiceRegistrar, srv ConsoleProxyServer) {
	s.RegisterService(&ConsoleProxy_ServiceDesc, srv)
}

func _ConsoleProxy_SessionLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleProxyServer).SessionLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.web.ConsoleProxy/SessionLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleProxyServer).SessionLogout(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsoleProxy_ServiceDesc is the grpc.ServiceDesc for ConsoleProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsoleProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.web.ConsoleProxy",
	HandlerType: (*ConsoleProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionLogout",
			Handler:    _ConsoleProxy_SessionLogout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webgrpc.proxy.console.proto",
}
