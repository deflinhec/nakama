// Copyright 2023 Deflinhec
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package nakama.web;

import "web.api.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "gitlab.com/casino543/nakama-web/webgrpc;webgrpc";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Nakama web API v2";
    version: "2.0";
    contact: {
      name: "Deflinhec & Contributors";
      url: "https://github.com/heroiclabs/nakama";
      email: "hello@deflinhec.dev";
    };
  };
  host: "127.0.0.1:8350";
  external_docs: {
    url: "https://github.com/heroiclabs/nakama";
    description: "Nakama server documentation";
  }
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BasicAuth";
      value: {
        type: TYPE_BASIC;
      }
    }
    security: {
      // Made up security so we can apply "Bearer <JWT_TOKEN>"
      key: "BearerJwt";
      value: {
        type: TYPE_INVALID;
      }
    }
  }
  // Default security definition.
  security: {
    security_requirement: {
      key: "BearerJwt";
      value: {};
    }
  }
};

// Verfiy password after verfied.
message VerifyPasswordRenewalRequest {
  // The user credentials.
  string token = 1;
  // The renewed password.
  string password = 2;
}

// Verfiy email address.
message VerifyEmailAddressRequest {
  // The user credentials.
  string token = 1;
}

/**
 * The RPC protocol service built with GRPC.
 */
service Web {
  // A healthcheck which load balancers can use to check the service.
  rpc Healthcheck (google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http).get = "/healthcheck";
  }
}

/**
 * The RPC protocol proxy service built with GRPC.
 */
 service WebForward {
  // Get available features from web ui.
  rpc GetFeatures(google.protobuf.Empty) returns (Features) {
    option (google.api.http) = {
      get: "/v2/features"
    };
  }
  
  // Send email verification.
  rpc SendEmailVerificationCode (SendEmailVerificationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v2/account/verify/code",
      body: "*"
    };
  }

  // Send email verification.
  rpc SendEmailVerificationLink (SendEmailVerificationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v2/account/verify/link",
      body: "*"
    };
  }

  // Send password reset email.
  rpc SendPasswordResetEmail (SendPasswordResetEmailRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v2/account/password/reset";
      body: "*"
    };
  }

  // Verfiy password from web ui.
  rpc VerifyPasswordRenewal (VerifyPasswordRenewalRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v2/account/password/renew";
      body: "*"
    };
  }

  // Verfiy email address from web ui.
  rpc VerifyEmailAddress (VerifyEmailAddressRequest) returns (google.protobuf.Empty) {
    option (google.api.http).delete = "/v2/account/verify/{token}";
  }
}