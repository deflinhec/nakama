// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: webgrpc.proxy.proto

package webgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebProxyClient is the client API for WebProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebProxyClient interface {
	// Get available features from web ui.
	VerifyVerificationCode(ctx context.Context, in *VerifyVerificationCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type webProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewWebProxyClient(cc grpc.ClientConnInterface) WebProxyClient {
	return &webProxyClient{cc}
}

func (c *webProxyClient) VerifyVerificationCode(ctx context.Context, in *VerifyVerificationCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nakama.web.WebProxy/VerifyVerificationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebProxyServer is the server API for WebProxy service.
// All implementations must embed UnimplementedWebProxyServer
// for forward compatibility
type WebProxyServer interface {
	// Get available features from web ui.
	VerifyVerificationCode(context.Context, *VerifyVerificationCodeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWebProxyServer()
}

// UnimplementedWebProxyServer must be embedded to have forward compatible implementations.
type UnimplementedWebProxyServer struct {
}

func (UnimplementedWebProxyServer) VerifyVerificationCode(context.Context, *VerifyVerificationCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyVerificationCode not implemented")
}
func (UnimplementedWebProxyServer) mustEmbedUnimplementedWebProxyServer() {}

// UnsafeWebProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebProxyServer will
// result in compilation errors.
type UnsafeWebProxyServer interface {
	mustEmbedUnimplementedWebProxyServer()
}

func RegisterWebProxyServer(s grpc.ServiceRegistrar, srv WebProxyServer) {
	s.RegisterService(&WebProxy_ServiceDesc, srv)
}

func _WebProxy_VerifyVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebProxyServer).VerifyVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.web.WebProxy/VerifyVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebProxyServer).VerifyVerificationCode(ctx, req.(*VerifyVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebProxy_ServiceDesc is the grpc.ServiceDesc for WebProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.web.WebProxy",
	HandlerType: (*WebProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyVerificationCode",
			Handler:    _WebProxy_VerifyVerificationCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webgrpc.proxy.proto",
}
