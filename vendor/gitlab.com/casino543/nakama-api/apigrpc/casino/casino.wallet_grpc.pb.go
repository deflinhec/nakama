// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: apigrpc/casino/casino.wallet.proto

package casino

import (
	context "context"
	casino "gitlab.com/casino543/nakama-api/api/casino"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletClient interface {
	// Authorize a user against the wallet provider.
	AuthorizeWalletProvider(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Query the wallet provider supported chain.
	QueryChainsFromWalletProvider(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*casino.ChainResponse, error)
	// Retrieve user wallet address from wallet provider.
	RetrieveAddressFromWalletProvider(ctx context.Context, in *casino.AddressRequest, opts ...grpc.CallOption) (*casino.AddressResponse, error)
}

type walletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClient(cc grpc.ClientConnInterface) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) AuthorizeWalletProvider(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nakama.casino.Wallet/AuthorizeWalletProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) QueryChainsFromWalletProvider(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*casino.ChainResponse, error) {
	out := new(casino.ChainResponse)
	err := c.cc.Invoke(ctx, "/nakama.casino.Wallet/QueryChainsFromWalletProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) RetrieveAddressFromWalletProvider(ctx context.Context, in *casino.AddressRequest, opts ...grpc.CallOption) (*casino.AddressResponse, error) {
	out := new(casino.AddressResponse)
	err := c.cc.Invoke(ctx, "/nakama.casino.Wallet/RetrieveAddressFromWalletProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
// All implementations must embed UnimplementedWalletServer
// for forward compatibility
type WalletServer interface {
	// Authorize a user against the wallet provider.
	AuthorizeWalletProvider(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Query the wallet provider supported chain.
	QueryChainsFromWalletProvider(context.Context, *emptypb.Empty) (*casino.ChainResponse, error)
	// Retrieve user wallet address from wallet provider.
	RetrieveAddressFromWalletProvider(context.Context, *casino.AddressRequest) (*casino.AddressResponse, error)
	mustEmbedUnimplementedWalletServer()
}

// UnimplementedWalletServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (UnimplementedWalletServer) AuthorizeWalletProvider(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeWalletProvider not implemented")
}
func (UnimplementedWalletServer) QueryChainsFromWalletProvider(context.Context, *emptypb.Empty) (*casino.ChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChainsFromWalletProvider not implemented")
}
func (UnimplementedWalletServer) RetrieveAddressFromWalletProvider(context.Context, *casino.AddressRequest) (*casino.AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAddressFromWalletProvider not implemented")
}
func (UnimplementedWalletServer) mustEmbedUnimplementedWalletServer() {}

// UnsafeWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServer will
// result in compilation errors.
type UnsafeWalletServer interface {
	mustEmbedUnimplementedWalletServer()
}

func RegisterWalletServer(s grpc.ServiceRegistrar, srv WalletServer) {
	s.RegisterService(&Wallet_ServiceDesc, srv)
}

func _Wallet_AuthorizeWalletProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AuthorizeWalletProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.casino.Wallet/AuthorizeWalletProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AuthorizeWalletProvider(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_QueryChainsFromWalletProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).QueryChainsFromWalletProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.casino.Wallet/QueryChainsFromWalletProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).QueryChainsFromWalletProvider(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_RetrieveAddressFromWalletProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(casino.AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).RetrieveAddressFromWalletProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.casino.Wallet/RetrieveAddressFromWalletProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).RetrieveAddressFromWalletProvider(ctx, req.(*casino.AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wallet_ServiceDesc is the grpc.ServiceDesc for Wallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.casino.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthorizeWalletProvider",
			Handler:    _Wallet_AuthorizeWalletProvider_Handler,
		},
		{
			MethodName: "QueryChainsFromWalletProvider",
			Handler:    _Wallet_QueryChainsFromWalletProvider_Handler,
		},
		{
			MethodName: "RetrieveAddressFromWalletProvider",
			Handler:    _Wallet_RetrieveAddressFromWalletProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apigrpc/casino/casino.wallet.proto",
}
