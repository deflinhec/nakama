// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: webapp/v2/webapp.proto

package webappv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebAppClient is the client API for WebApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebAppClient interface {
	// Get available features from web ui.
	GetFeatures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Features, error)
	// Send email register code.
	SendEmailRegisterCode(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Send email verify link.
	SendEmailVerifyLink(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Send password reset email.
	SendPasswordResetLink(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Verfiy password renewal.
	VerifyPasswordReset(ctx context.Context, in *VerifyPasswordResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Verfiy token which sent toward the email.
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Verfiy verification code.
	VerifyRegisterCode(ctx context.Context, in *VerifyRegisterCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type webAppClient struct {
	cc grpc.ClientConnInterface
}

func NewWebAppClient(cc grpc.ClientConnInterface) WebAppClient {
	return &webAppClient{cc}
}

func (c *webAppClient) GetFeatures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Features, error) {
	out := new(Features)
	err := c.cc.Invoke(ctx, "/elysiumrealms.webapp.v2.WebApp/GetFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppClient) SendEmailRegisterCode(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/elysiumrealms.webapp.v2.WebApp/SendEmailRegisterCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppClient) SendEmailVerifyLink(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/elysiumrealms.webapp.v2.WebApp/SendEmailVerifyLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppClient) SendPasswordResetLink(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/elysiumrealms.webapp.v2.WebApp/SendPasswordResetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppClient) VerifyPasswordReset(ctx context.Context, in *VerifyPasswordResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/elysiumrealms.webapp.v2.WebApp/VerifyPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/elysiumrealms.webapp.v2.WebApp/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppClient) VerifyRegisterCode(ctx context.Context, in *VerifyRegisterCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/elysiumrealms.webapp.v2.WebApp/VerifyRegisterCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebAppServer is the server API for WebApp service.
// All implementations must embed UnimplementedWebAppServer
// for forward compatibility
type WebAppServer interface {
	// Get available features from web ui.
	GetFeatures(context.Context, *emptypb.Empty) (*Features, error)
	// Send email register code.
	SendEmailRegisterCode(context.Context, *EmailRequest) (*emptypb.Empty, error)
	// Send email verify link.
	SendEmailVerifyLink(context.Context, *EmailRequest) (*emptypb.Empty, error)
	// Send password reset email.
	SendPasswordResetLink(context.Context, *EmailRequest) (*emptypb.Empty, error)
	// Verfiy password renewal.
	VerifyPasswordReset(context.Context, *VerifyPasswordResetRequest) (*emptypb.Empty, error)
	// Verfiy token which sent toward the email.
	VerifyEmail(context.Context, *VerifyEmailRequest) (*emptypb.Empty, error)
	// Verfiy verification code.
	VerifyRegisterCode(context.Context, *VerifyRegisterCodeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWebAppServer()
}

// UnimplementedWebAppServer must be embedded to have forward compatible implementations.
type UnimplementedWebAppServer struct {
}

func (UnimplementedWebAppServer) GetFeatures(context.Context, *emptypb.Empty) (*Features, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}
func (UnimplementedWebAppServer) SendEmailRegisterCode(context.Context, *EmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailRegisterCode not implemented")
}
func (UnimplementedWebAppServer) SendEmailVerifyLink(context.Context, *EmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailVerifyLink not implemented")
}
func (UnimplementedWebAppServer) SendPasswordResetLink(context.Context, *EmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordResetLink not implemented")
}
func (UnimplementedWebAppServer) VerifyPasswordReset(context.Context, *VerifyPasswordResetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPasswordReset not implemented")
}
func (UnimplementedWebAppServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedWebAppServer) VerifyRegisterCode(context.Context, *VerifyRegisterCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRegisterCode not implemented")
}
func (UnimplementedWebAppServer) mustEmbedUnimplementedWebAppServer() {}

// UnsafeWebAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebAppServer will
// result in compilation errors.
type UnsafeWebAppServer interface {
	mustEmbedUnimplementedWebAppServer()
}

func RegisterWebAppServer(s grpc.ServiceRegistrar, srv WebAppServer) {
	s.RegisterService(&WebApp_ServiceDesc, srv)
}

func _WebApp_GetFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServer).GetFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysiumrealms.webapp.v2.WebApp/GetFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServer).GetFeatures(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApp_SendEmailRegisterCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServer).SendEmailRegisterCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysiumrealms.webapp.v2.WebApp/SendEmailRegisterCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServer).SendEmailRegisterCode(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApp_SendEmailVerifyLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServer).SendEmailVerifyLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysiumrealms.webapp.v2.WebApp/SendEmailVerifyLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServer).SendEmailVerifyLink(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApp_SendPasswordResetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServer).SendPasswordResetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysiumrealms.webapp.v2.WebApp/SendPasswordResetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServer).SendPasswordResetLink(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApp_VerifyPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServer).VerifyPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysiumrealms.webapp.v2.WebApp/VerifyPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServer).VerifyPasswordReset(ctx, req.(*VerifyPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApp_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysiumrealms.webapp.v2.WebApp/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApp_VerifyRegisterCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRegisterCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServer).VerifyRegisterCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysiumrealms.webapp.v2.WebApp/VerifyRegisterCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServer).VerifyRegisterCode(ctx, req.(*VerifyRegisterCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebApp_ServiceDesc is the grpc.ServiceDesc for WebApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elysiumrealms.webapp.v2.WebApp",
	HandlerType: (*WebAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeatures",
			Handler:    _WebApp_GetFeatures_Handler,
		},
		{
			MethodName: "SendEmailRegisterCode",
			Handler:    _WebApp_SendEmailRegisterCode_Handler,
		},
		{
			MethodName: "SendEmailVerifyLink",
			Handler:    _WebApp_SendEmailVerifyLink_Handler,
		},
		{
			MethodName: "SendPasswordResetLink",
			Handler:    _WebApp_SendPasswordResetLink_Handler,
		},
		{
			MethodName: "VerifyPasswordReset",
			Handler:    _WebApp_VerifyPasswordReset_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _WebApp_VerifyEmail_Handler,
		},
		{
			MethodName: "VerifyRegisterCode",
			Handler:    _WebApp_VerifyRegisterCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webapp/v2/webapp.proto",
}
