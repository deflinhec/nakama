// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: console.wallet.proto

package console

import (
	context "context"
	apiwallet "github.com/heroiclabs/nakama/v3/api/apiwallet"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletProviderClient is the client API for WalletProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletProviderClient interface {
	// Deposit amount of currency to user account.
	DepositFromWalletProvider(ctx context.Context, in *apiwallet.TransactionRequest, opts ...grpc.CallOption) (*apiwallet.BalanceResponse, error)
	// Withdraw amount of currency from user account.
	WithdrawFromWalletProvider(ctx context.Context, in *apiwallet.TransactionRequest, opts ...grpc.CallOption) (*apiwallet.BalanceResponse, error)
	// Get currency balance of from user account.
	GetWalletBalance(ctx context.Context, in *apiwallet.BalanceRequest, opts ...grpc.CallOption) (*apiwallet.BalanceResponse, error)
}

type walletProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletProviderClient(cc grpc.ClientConnInterface) WalletProviderClient {
	return &walletProviderClient{cc}
}

func (c *walletProviderClient) DepositFromWalletProvider(ctx context.Context, in *apiwallet.TransactionRequest, opts ...grpc.CallOption) (*apiwallet.BalanceResponse, error) {
	out := new(apiwallet.BalanceResponse)
	err := c.cc.Invoke(ctx, "/nakama.api.wallet.WalletProvider/DepositFromWalletProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletProviderClient) WithdrawFromWalletProvider(ctx context.Context, in *apiwallet.TransactionRequest, opts ...grpc.CallOption) (*apiwallet.BalanceResponse, error) {
	out := new(apiwallet.BalanceResponse)
	err := c.cc.Invoke(ctx, "/nakama.api.wallet.WalletProvider/WithdrawFromWalletProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletProviderClient) GetWalletBalance(ctx context.Context, in *apiwallet.BalanceRequest, opts ...grpc.CallOption) (*apiwallet.BalanceResponse, error) {
	out := new(apiwallet.BalanceResponse)
	err := c.cc.Invoke(ctx, "/nakama.api.wallet.WalletProvider/GetWalletBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletProviderServer is the server API for WalletProvider service.
// All implementations must embed UnimplementedWalletProviderServer
// for forward compatibility
type WalletProviderServer interface {
	// Deposit amount of currency to user account.
	DepositFromWalletProvider(context.Context, *apiwallet.TransactionRequest) (*apiwallet.BalanceResponse, error)
	// Withdraw amount of currency from user account.
	WithdrawFromWalletProvider(context.Context, *apiwallet.TransactionRequest) (*apiwallet.BalanceResponse, error)
	// Get currency balance of from user account.
	GetWalletBalance(context.Context, *apiwallet.BalanceRequest) (*apiwallet.BalanceResponse, error)
	mustEmbedUnimplementedWalletProviderServer()
}

// UnimplementedWalletProviderServer must be embedded to have forward compatible implementations.
type UnimplementedWalletProviderServer struct {
}

func (UnimplementedWalletProviderServer) DepositFromWalletProvider(context.Context, *apiwallet.TransactionRequest) (*apiwallet.BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositFromWalletProvider not implemented")
}
func (UnimplementedWalletProviderServer) WithdrawFromWalletProvider(context.Context, *apiwallet.TransactionRequest) (*apiwallet.BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFromWalletProvider not implemented")
}
func (UnimplementedWalletProviderServer) GetWalletBalance(context.Context, *apiwallet.BalanceRequest) (*apiwallet.BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletBalance not implemented")
}
func (UnimplementedWalletProviderServer) mustEmbedUnimplementedWalletProviderServer() {}

// UnsafeWalletProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletProviderServer will
// result in compilation errors.
type UnsafeWalletProviderServer interface {
	mustEmbedUnimplementedWalletProviderServer()
}

func RegisterWalletProviderServer(s grpc.ServiceRegistrar, srv WalletProviderServer) {
	s.RegisterService(&WalletProvider_ServiceDesc, srv)
}

func _WalletProvider_DepositFromWalletProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apiwallet.TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletProviderServer).DepositFromWalletProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.wallet.WalletProvider/DepositFromWalletProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletProviderServer).DepositFromWalletProvider(ctx, req.(*apiwallet.TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletProvider_WithdrawFromWalletProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apiwallet.TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletProviderServer).WithdrawFromWalletProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.wallet.WalletProvider/WithdrawFromWalletProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletProviderServer).WithdrawFromWalletProvider(ctx, req.(*apiwallet.TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletProvider_GetWalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(apiwallet.BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletProviderServer).GetWalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.wallet.WalletProvider/GetWalletBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletProviderServer).GetWalletBalance(ctx, req.(*apiwallet.BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletProvider_ServiceDesc is the grpc.ServiceDesc for WalletProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.api.wallet.WalletProvider",
	HandlerType: (*WalletProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DepositFromWalletProvider",
			Handler:    _WalletProvider_DepositFromWalletProvider_Handler,
		},
		{
			MethodName: "WithdrawFromWalletProvider",
			Handler:    _WalletProvider_WithdrawFromWalletProvider_Handler,
		},
		{
			MethodName: "GetWalletBalance",
			Handler:    _WalletProvider_GetWalletBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console.wallet.proto",
}
