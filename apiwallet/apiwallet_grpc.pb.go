// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: apiwallet.proto

package apiwallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletProviderClient is the client API for WalletProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletProviderClient interface {
	// Authorize a user against the wallet provider.
	AuthorizeWalletProvider(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Fetch the avaliable list of chain.
	ListChainsFromWalletProvider(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChainResponse, error)
	// Fetch the current user's account.
	GetAddressFromWalletProvider(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
}

type walletProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletProviderClient(cc grpc.ClientConnInterface) WalletProviderClient {
	return &walletProviderClient{cc}
}

func (c *walletProviderClient) AuthorizeWalletProvider(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nakama.wallet.api.WalletProvider/AuthorizeWalletProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletProviderClient) ListChainsFromWalletProvider(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChainResponse, error) {
	out := new(ChainResponse)
	err := c.cc.Invoke(ctx, "/nakama.wallet.api.WalletProvider/ListChainsFromWalletProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletProviderClient) GetAddressFromWalletProvider(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, "/nakama.wallet.api.WalletProvider/GetAddressFromWalletProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletProviderServer is the server API for WalletProvider service.
// All implementations must embed UnimplementedWalletProviderServer
// for forward compatibility
type WalletProviderServer interface {
	// Authorize a user against the wallet provider.
	AuthorizeWalletProvider(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Fetch the avaliable list of chain.
	ListChainsFromWalletProvider(context.Context, *emptypb.Empty) (*ChainResponse, error)
	// Fetch the current user's account.
	GetAddressFromWalletProvider(context.Context, *AddressRequest) (*AddressResponse, error)
	mustEmbedUnimplementedWalletProviderServer()
}

// UnimplementedWalletProviderServer must be embedded to have forward compatible implementations.
type UnimplementedWalletProviderServer struct {
}

func (UnimplementedWalletProviderServer) AuthorizeWalletProvider(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeWalletProvider not implemented")
}
func (UnimplementedWalletProviderServer) ListChainsFromWalletProvider(context.Context, *emptypb.Empty) (*ChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChainsFromWalletProvider not implemented")
}
func (UnimplementedWalletProviderServer) GetAddressFromWalletProvider(context.Context, *AddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressFromWalletProvider not implemented")
}
func (UnimplementedWalletProviderServer) mustEmbedUnimplementedWalletProviderServer() {}

// UnsafeWalletProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletProviderServer will
// result in compilation errors.
type UnsafeWalletProviderServer interface {
	mustEmbedUnimplementedWalletProviderServer()
}

func RegisterWalletProviderServer(s grpc.ServiceRegistrar, srv WalletProviderServer) {
	s.RegisterService(&WalletProvider_ServiceDesc, srv)
}

func _WalletProvider_AuthorizeWalletProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletProviderServer).AuthorizeWalletProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.wallet.api.WalletProvider/AuthorizeWalletProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletProviderServer).AuthorizeWalletProvider(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletProvider_ListChainsFromWalletProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletProviderServer).ListChainsFromWalletProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.wallet.api.WalletProvider/ListChainsFromWalletProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletProviderServer).ListChainsFromWalletProvider(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletProvider_GetAddressFromWalletProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletProviderServer).GetAddressFromWalletProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.wallet.api.WalletProvider/GetAddressFromWalletProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletProviderServer).GetAddressFromWalletProvider(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletProvider_ServiceDesc is the grpc.ServiceDesc for WalletProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.wallet.api.WalletProvider",
	HandlerType: (*WalletProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthorizeWalletProvider",
			Handler:    _WalletProvider_AuthorizeWalletProvider_Handler,
		},
		{
			MethodName: "ListChainsFromWalletProvider",
			Handler:    _WalletProvider_ListChainsFromWalletProvider_Handler,
		},
		{
			MethodName: "GetAddressFromWalletProvider",
			Handler:    _WalletProvider_GetAddressFromWalletProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiwallet.proto",
}
